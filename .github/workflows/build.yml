name: Deploy to ECR

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Configure AWS credentials
      id: aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mcp-router
        IMAGE_TAG: latest
      run: |
        # Get the short SHA
        SHORT_SHA=$(git rev-parse --short HEAD)

        # Build with latest and commit SHA tags
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA .

        # Push both tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA

        # Get git tags pointing to current commit (if any)
        GIT_TAGS=$(git tag --points-at HEAD)

        # If there are git tags, build and push with those tags
        if [ ! -z "$GIT_TAGS" ]; then
          for TAG in $GIT_TAGS; do
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
          done
        fi

        echo "image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Download current task definition
      id: download-task-def
      run: |
        aws ecs describe-task-definition --task-definition mcp-router-task --query 'taskDefinition' > task-definition.json

    - name: Render task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: mcp-router
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      id: deploy-ecs
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: mcp-router
        cluster: mcp-router
        wait-for-service-stability: true
