name: CI/CD

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: chroma-cluster
  ECR_REPOSITORY: chroma/mcp-router
  NAMESPACE: mcp-router
  NODE_VERSION: 24.x

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mcp_router_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Typecheck
        run: npx tsc --noEmit

      - name: Build
        run: npm run build

      - name: Test
        run: npm test
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/mcp_router_test
          NODE_ENV: test
          ROUTER_PORT: 4001

      - name: Verify
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "Error: Uncommitted changes detected after build"
            git status --porcelain
            exit 1
          fi

      - name: Audit
        run: npm audit --audit-level=high
        # continue-on-error: true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login
      id: login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build
      run: |
        docker build -t ${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
                     -t ${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest .

    - name: Push
      run: |
        docker push ${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        docker push ${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    - name: Configure
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Deploy
      run: |
        # Update the deployment with the new image
        kubectl set image deployment/mcp-router \
          mcp-router=${{ steps.login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
          -n ${{ env.NAMESPACE }}

        # Wait for rollout to complete
        kubectl rollout status deployment/mcp-router -n ${{ env.NAMESPACE }}

    - name: Verify
      run: |
        kubectl get pods -n ${{ env.NAMESPACE }}
        kubectl get services -n ${{ env.NAMESPACE }}
        kubectl get ingress -n ${{ env.NAMESPACE }}
